VARIOUS GAME ATTRIBUTES.

Chess
- Complex and situational piece movement
- Piece promotion
- Forced moves (Check[mate])
- Algebraic notation (almost a meta-program)

Go
- Territory
- Liberties
- Placement from an unlimited reserve

Tafl
- Asymmetric win conditions

Life Genesis (http://en.wikipedia.org/wiki/Life_Genesis)
- A turing complete game board




DESIGN GOALS.

As far as goals for the project I had imagined we would make a sort of compiler
that could load in a .bgal file and then give an interactive cli program to play
the game.

We would need to have the compiler be able to generate a game engine and at the
very least a random move ai and an io interface. Ideally we could have a min-max
skeleton with the optional ability for .bgal's to include a description of state
evaluation functions. For example, chess could give one that says every pieces
value and then the state evaluates to our pieces minus their pieces.




MOVE REPRESENTATION.

* How to define a "move" generally enough / still useful
    - Cover "Placement moves" and "movement moves"

* Possibility:
    * A move is is a pair of sets, R and P, where, subject to the rules of the game,
        - R is a set of pieces removed from the board
        - P is a set of pieces added to the board

    * Example.
        A knight capturing a queen might be represented as R={wN@e4, bQ@d2},
        P={wN@d2}. We could express a go move the same way, R={}, P={b@(0,3)},
        or maybe R={chain@(3,3)}, P={w@(3,4)}.


